public class  SliceoHeaven{
    public String storeName;
    public String storeAddress;

    private String storeMenu;
    public long storePhone;
    public String storeEmail;
    public String pizzaIngredients;
    public double pizzaPrice;
    public String sides;

    private String orderID;
    private String drinks;
    private double orderTotal;

    public static final String DEF_ORDER_ID = "DEF-SOH-099";
    public static final String DEF_PIZZA_INGREDIENTS = "Mozzarella Cheese";
    public static final double DEF_ORDER_TOTAL = 15.00;

    public SliceoHeaven() {
        this.orderID = DEF_ORDER_ID;
        this.pizzaIngredients = DEF_PIZZA_INGREDIENTS;
        this.orderTotal = DEF_ORDER_TOTAL;
        this.sides = "";
        this.drinks = "";
    }
    public SliceoHeaven(String orderID, String pizzaIngredients, double orderTotal) {
        this.orderID = orderID;
        this.pizzaIngredients = pizzaIngredients;
        this.orderTotal = orderTotal;
    }

    public String getOrderID() {
        return orderID;
    }

    public void setOrderID(String orderID) {
        this.orderID = orderID;
    }

    public String getDrinks() {
        return drinks;
    }

    public void setDrinks(String drinks) {
        this.drinks = drinks;
    }

    public double getOrderTotal() {
        return orderTotal;
    }

    public void setOrderTotal(double orderTotal) {
        this.orderTotal = orderTotal;
    }

    public String getStoreMenu() {
        return storeMenu;
    }

    public void setStoreMenu(String storeMenu) {
        this.storeMenu = storeMenu;
    }

    public void takeOrder(String id, double total){
        setOrderID(id);
        setOrderTotal(total);

        System.out.println("Order accepted!");

        System.out.println("Order is being prepared");
        makePizza();
        
    }
    public void makePizza(){
        try{
            Thread.sleep(5000);
        } catch (InterruptedException e){
            e.printStackTrace();
        }
        System.out.println("Your order is ready!");

        printReceipt();
    }

    
    private void printReceipt(){
        System.out.println("********RECEIPT********");
        System.out.println("Store Name: " + storeName);

        System.out.println("OrderID: " + getOrderID());
   
        System.out.println("OrderTotal: " + getOrderTotal());
    }
    public void processCardPayment(String cardNumber,String expiryDate,int cvv){
        int cardLength = cardNumber.length();
        if(cardLength ==14) {
            System.out.println("Card accepted");
        }else {
            System.out.println("Invalid card");
        }
        int firstCardDigit = Integer.parseInt(cardNumber.substring(0, 1));

        String blacklistedNumber = "12345678901234";
        if (cardNumber.equals(blacklistedNumber)) {
            System.out.println("Card is blacklisted. Please use another card");
        }

        int lastFourDigits = Integer.parseInt(cardNumber.substring(cardNumber.length() - 4));

        String cardNumberToDisplay = cardNumber.charAt(0) +
                cardNumber.substring(1, cardNumber.length() - 4).replaceAll(".", "*") +
                cardNumber.substring(cardNumber.length() - 4);

        System.out.println("First digit of the card: " + firstCardDigit);
        System.out.println("Last four digits of the card: " + lastFourDigits);
        System.out.println("Card number to display: " + cardNumberToDisplay);
    }

    public void specialOfTheDay(String pizzaOfTheDay, String sideOfTheDay, String specialPrice) {
        StringBuilder specialInfo = new StringBuilder();
        specialInfo.append("Special of the Day:\n");
        specialInfo.append("Pizza: ").append(pizzaOfTheDay).append("\n");
        specialInfo.append("Side: ").append(sideOfTheDay).append("\n");
        specialInfo.append("Price: ").append(specialPrice);
        System.out.println(specialInfo.toString());
    }   