import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Scanner;

public class SliceoHeaven {
    public String storeName;
    public String storeAddress;

    private String storeMenu;
    public long storePhone;
    public String storeEmail;
    public String pizzaIngredients;
    public double pizzaPrice;
    public String sides;

    private String orderID;
    private String drinks;
    private double orderTotal;

    public static final String DEF_ORDER_ID = "DEF-SOH-099";
    public static final String DEF_PIZZA_INGREDIENTS = "Mozzarella Cheese";
    public static final double DEF_ORDER_TOTAL = 15.00;
    public static final long BLACKLISTED_NUMBER = 12345678901234L;

    private Scanner scanner;

    public SliceoHeaven() {
        this.scanner = new Scanner(System.in);
        this.orderID = DEF_ORDER_ID;
        this.pizzaIngredients = DEF_PIZZA_INGREDIENTS;
        this.orderTotal = DEF_ORDER_TOTAL;
        this.sides = "";
        this.drinks = "";
    }

    public SliceoHeaven(String orderID, String pizzaIngredients, double orderTotal) {
        this.scanner = new Scanner(System.in);
        this.orderID = orderID;
        this.pizzaIngredients = pizzaIngredients;
        this.orderTotal = orderTotal;
    }

    public String getOrderID() {
        return orderID;
    }

    public void setOrderID(String orderID) {
        this.orderID = orderID;
    }

    public String getDrinks() {
        return drinks;
    }

    public void setDrinks(String drinks) {
        this.drinks = drinks;
    }

    public double getOrderTotal() {
        return orderTotal;
    }

    public void setOrderTotal(double orderTotal) {
        this.orderTotal = orderTotal;
    }

    public String getStoreMenu() {
        return storeMenu;
    }

    public void setStoreMenu(String storeMenu) {
        this.storeMenu = storeMenu;
    }

    public void takeOrder() {

        int[] ingChoices = getValidChoices(3, 1, 5, "Please pick any three of the following ingredients:",
                "1. Mushroom", "2. Paprika", "3. Sun-dried tomatoes", "4. Chicken", "5. Pineapple",
                "Enter any three choices (1, 2, 3,…) separated by spaces:");
        String ing1 = getIngredientFromChoice(ingChoices[0]);
        String ing2 = getIngredientFromChoice(ingChoices[1]);
        String ing3 = getIngredientFromChoice(ingChoices[2]);
        pizzaIngredients = ing1 + ", " + ing2 + ", " + ing3;

        int sizeChoice = getValidChoices(1, 1, 3, "What size should your pizza be?",
                "1. Large", "2. Medium", "3. Small",
                "Enter only one choice (1, 2, or 3):")[0];
        String pizzaSize = getPizzaSizeFromChoice(sizeChoice);

        System.out.println("Do you want extra cheese (Y/N):");
        String extraCheese = scanner.next();
        scanner.nextLine(); 
       
        int sideDishChoice = getValidChoices(1, 1, 5, "Following are the side dish that go well with your pizza:",
                "1. Calzone", "2. Garlic bread", "3. Chicken puff", "4. Muffin", "5. Nothing for me",
                "What would you like? Pick one (1, 2, 3,…):")[0];
        String sideDish = getSideDishFromChoice(sideDishChoice);
        sides = sideDish;


        int drinkChoice = getValidChoices(1, 1, 4, "Choose from one of the drinks below. We recommend Coca Cola:",
                "1. Coca Cola", "2. Cold coffee", "3. Cocoa Drink", "4. No drinks for me",
                "Enter your choice:")[0];
        drinks = getDrinkFromChoice(drinkChoice);

        System.out.println("Would you like the chance to pay only half for your order? (Y/N):");
        String wantDiscount = scanner.next();
        scanner.nextLine(); 

        if (wantDiscount.equalsIgnoreCase("Y")) {
            isItYourBirthday();
        } else {
            makeCardPayment();
        }
    }

    private int[] getValidChoices(int numChoices, int min, int max, String... messages) {
        int[] choices = new int[numChoices];
        while (true) {
            for (String message : messages) {
                System.out.println(message);
            }
            try {
                for (int i = 0; i < numChoices; i++) {
                    choices[i] = scanner.nextInt();
                    if (choices[i] < min || choices[i] > max) {
                        throw new IllegalArgumentException();
                    }
                }
                scanner.nextLine(); 
                break;
            } catch (Exception e) {
                scanner.nextLine(); 
                System.out.println("Invalid choice(s). Please pick only from the given list:");
            }
        }
        return choices;
    }

    private boolean isValidIngredientChoice(int choice) {
        return choice >= 1 && choice <= 5;
    }

    private String getIngredientFromChoice(int choice) {
        switch (choice) {
            case 1:
                return "Mushroom";
            case 2:
                return "Paprika";
            case 3:
                return "Sun-dried tomatoes";
            case 4:
                return "Chicken";
            case 5:
                return "Pineapple";
            default:
                return "";
        }
    }

    private String getPizzaSizeFromChoice(int choice) {
        switch (choice) {
            case 1:
                return "Large";
            case 2:
                return "Medium";
            case 3:
                return "Small";
            default:
                return "";
        }
    }

    private String getSideDishFromChoice(int choice) {
        switch (choice) {
            case 1:
                return "Calzone";
            case 2:
                return "Garlic bread";
            case 3:
                return "Chicken puff";
            case 4:
                return "Muffin";
            case 5:
                return "Nothing for me";
            default:
                return "";
        }
    }

    private String getDrinkFromChoice(int choice) {
        switch (choice) {
            case 1:
                return "Coca Cola";
            case 2:
                return "Cold coffee";
            case 3:
                return "Cocoa Drink";
            case 4:
                return "No drinks for me";
            default:
                return "";
        }
    }

    public void isItYourBirthday() {
        LocalDate birthdate;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        while (true) {
            System.out.println("Enter your birthday (dd/MM/yyyy):");
            String birthdateStr = scanner.next();
            scanner.nextLine(); 
            try {
                birthdate = LocalDate.parse(birthdateStr, formatter);
                LocalDate fiveYearsAgo = LocalDate.now().minusYears(5);
                LocalDate oneHundredTwentyYearsAgo = LocalDate.now().minusYears(120);
                if (birthdate.isBefore(fiveYearsAgo) && birthdate.isAfter(oneHundredTwentyYearsAgo)) {
                    break;
                }
                System.out.println("Invalid date. You are either too young or too dead to order.");
                System.out.println("Please enter a valid date:");
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please use dd/MM/yyyy.");
            }
        }
        LocalDate today = LocalDate.now();
        int age = today.getYear() - birthdate.getYear();
        if (today.getMonthValue() < birthdate.getMonthValue() ||
                (today.getMonthValue() == birthdate.getMonthValue() && today.getDayOfMonth() < birthdate.getDayOfMonth())) {
            age--;
        }

        if (age < 18 && today.getMonthValue() == birthdate.getMonthValue() && today.getDayOfMonth() == birthdate.getDayOfMonth()) {
            System.out.println("Congratulations! You pay only half the price for your order");
            orderTotal /= 2;
        } else {
            System.out.println("Too bad! You do not meet the conditions to get our 50% discount");
        }
        makePizza();
    }

    public void makeCardPayment() {
        long cardNumber;
        String expiryDate;
        int cvv;
        while (true) {
            System.out.println("Enter your card number:");
            try {
                cardNumber = scanner.nextLong();
                scanner.nextLine(); 
                String cardNumberStr = Long.toString(cardNumber);
                if (cardNumberStr.length() == 14 && cardNumber != BLACKLISTED_NUMBER) {
                    break;
                }
                System.out.println("Invalid card number. Please enter a 14-digit number that is not blacklisted:");
            } catch (Exception e) {
                scanner.nextLine(); 
                System.out.println("Invalid card number. Please enter a 14-digit number that is not blacklisted:");
            }
        }
        DateTimeFormatter expiryFormatter = DateTimeFormatter.ofPattern("MM/yyyy");
        LocalDate currentDate = LocalDate.now();
        while (true) {
            System.out.println("Enter the card’s expiry date (MM/yyyy):");
            expiryDate = scanner.next();
            scanner.nextLine(); 
            try {
                LocalDate expiry = LocalDate.parse("01/" + expiryDate, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                if (expiry.isAfter(currentDate)) {
                    break;
                }
                System.out.println("Invalid expiry date. Please enter a future date:");
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please use MM/yyyy.");
            }
        }
        System.out.println("Enter the card’s cvv number:");
        cvv = scanner.nextInt();
        scanner.nextLine(); 

        processCardPayment(cardNumber, expiryDate, cvv);
        makePizza();
    }

    public void makePizza() {
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Your order is ready!");
        System.out.println(this);
    }

    @Override
    public String toString() {
        StringBuilder receipt = new StringBuilder();
        receipt.append("********RECEIPT********\n");
        receipt.append("Store Name: ").append(storeName).append("\n");
        receipt.append("OrderID: ").append(getOrderID()).append("\n");
        receipt.append("Pizza Ingredients: ").append(pizzaIngredients).append("\n");
        receipt.append("Sides: ").append(sides).append("\n");
        receipt.append("Drinks: ").append(drinks).append("\n");
        receipt.append("OrderTotal: ").append(getOrderTotal()).append("\n");
        return receipt.toString();
    }

    public void processCardPayment(long cardNumber, String expiryDate, int cvv) {
        String cardNumberStr = Long.toString(cardNumber);
        if (cardNumberStr.length() != 14) {
            System.out.println("Invalid card");
            return;
        }
        if (cardNumber == BLACKLISTED_NUMBER) {
            System.out.println("Card is blacklisted. Please use another card");
            return;
        }
        int firstCardDigit = Integer.parseInt(cardNumberStr.substring(0, 1));
        int lastFourDigits = Integer.parseInt(cardNumberStr.substring(cardNumberStr.length() - 4));
        String cardNumberToDisplay = cardNumberStr.charAt(0) +
                cardNumberStr.substring(1, cardNumberStr.length() - 4).replaceAll(".", "*") +
                cardNumberStr.substring(cardNumberStr.length() - 4);

        System.out.println("First digit of the card: " + firstCardDigit);
        System.out.println("Last four digits of the card: " + lastFourDigits);
        System.out.println("Card number to display: " + cardNumberToDisplay);
    }

    public void specialOfTheDay(String pizzaOfTheDay, String sideOfTheDay, String specialPrice) {
        StringBuilder specialInfo = new StringBuilder();
        specialInfo.append("Special of the Day:\n");
        specialInfo.append("Pizza: ").append(pizzaOfTheDay).append("\n");
        specialInfo.append("Side: ").append(sideOfTheDay).append("\n");
        specialInfo.append("Price: ").append(specialPrice);
        System.out.println(specialInfo.toString());
    }

    public static void main(String[] args) {
        SliceoHeaven slice = new SliceoHeaven();
        slice.takeOrder();
        slice.specialOfTheDay("Margherita Pizza", "Garlic Bread", "$12");
    }
}